% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R, R/initialize_values.R
\name{cinitialize_values}
\alias{cinitialize_values}
\alias{initialize_values}
\title{Initialize the Latent Volatility and Parameters}
\usage{
cinitialize_values(y, ini_par, h)

initialize_values(y, ini_par, h = 1)
}
\arguments{
\item{y}{vector of returns \[\eqn{y_1, ..., y_N}\].}

\item{ini_par}{vector of parameters \eqn{(\mu,k,\theta,\sigma_v,\rho,\lambda,\sigma_j)}
initial values.}

\item{h}{time unit.}
}
\value{
a list with four elements, one vector of all parameters, and one
vector of the latent volatility, one vector of jump sizes, and the last
one vector of jump times.
}
\description{
Initialize the latent volatility and parameters with a good guess. Making
sure the initialized volatility are positive.
* `cinitialize_values()` implemented in C++, through package Rcpp, returns a
vector of volatility, the outside `parameters` changes along with the
initialization inside the function.
* `initialize_values()` implemented in R.
}
\details{
Parameters are first initialized. The volatility starting
point \eqn{v_0} is set to the long-run mean of volatility, \eqn{\theta}.
Then we use \eqn{P(v_n|v_{n-1},y_n)} to sample \eqn{v_n} iteratively.
However, we may end up some non-positive volatility because of using the
discretized SVJ model, i.e.,
\deqn{y_n=\mu h -\frac{1}{2}v_{n-1}h + \sqrt{v_{n-1}h}\epsilon_n^y + J_n I_n,}
\deqn{v_n-v_{n-1}=k(\theta-v_{n-1})h + \sigma_v\sqrt{v_{n-1}h}\epsilon_n^v.}
The conditional distribution
\deqn{P(v_n|v_{n-1},y_n,J_n,I_n)\sim\mathcal{N}
      (v_{n-1}+k(\theta-v_{n-1})h + \sigma_v\rho\sqrt{v_{n-1}h}\epsilon_n^y,
       \sigma_v^2(1-\rho^2)v_{n-1}h)}
where \deqn{\sqrt{v_{n-1}h}\epsilon_n^y = y_n-\mu h + \frac{1}{2}v_{n-1}h -J_nI_n.}
If that does happen, we make a change as
\deqn{v_n =
      \begin{cases}
       v_n|v_{n-1},y_n & \text{if } v_n|v_{n-1},y_n > 0,\\
       0.00001         & \text{if } v_n|v_{n-1},y_n \le 0.
      \end{cases}}
}
\examples{
y = rep(0.125,4)
ini_par=c(0.0625,0.05,0.125,0.05,-0.35, 0.01, 0.5)
parameters_v_jsize_jtime = initialize_values(y, ini_par)
}
